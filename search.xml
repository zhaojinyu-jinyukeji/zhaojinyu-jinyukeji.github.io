<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“众志成城，携手共进”四大团队合作协议章程</title>
      <link href="/oi-pc-philosophy-2006oier-announcement.html"/>
      <url>/oi-pc-philosophy-2006oier-announcement.html</url>
      
        <content type="html"><![CDATA[<h1 id="“众志成城，携手共进”四大团队合作协议章程"><a href="#“众志成城，携手共进”四大团队合作协议章程" class="headerlink" title="“众志成城，携手共进”四大团队合作协议章程"></a>“众志成城，携手共进”四大团队合作协议章程</h1><h2 id="第一条-总纲"><a href="#第一条-总纲" class="headerlink" title="第一条 总纲"></a>第一条 总纲</h2><p>为了增强信息学竞赛选手的合作意识，树立良好的学生合作竞争风气，特制定本章程。</p><h2 id="第二条-组织与领导"><a href="#第二条-组织与领导" class="headerlink" title="第二条 组织与领导"></a>第二条 组织与领导</h2><p>2.1 本章程适用于<a href="https://www.luogu.com.cn/team/16725" target="_blank" rel="noopener">OI加油站</a>，<br><a href="https://www.luogu.com.cn/team/23922" target="_blank" rel="noopener">PC加油站</a>，<br><a href="https://www.luogu.com.cn/team/13374" target="_blank" rel="noopener">2006年OIer联合团队</a>与<a href="https://www.luogu.com.cn/team/16988" target="_blank" rel="noopener">哲学团队</a>四大组织。</p><p>2.2 <code>HuangGuanqi</code>，<code>liziheng</code>与<code>吴捧鱼_wpy_WPY</code>共同组成本联合团的领导小组，为本联合团的一切对公事务负责。</p><h2 id="第三条-奖励制度"><a href="#第三条-奖励制度" class="headerlink" title="第三条 奖励制度"></a>第三条 奖励制度</h2><h3 id="第一款-概述"><a href="#第一款-概述" class="headerlink" title="第一款 概述"></a>第一款 概述</h3><p>3.1.1 本联合团的法定货币为<code>AK币</code>。</p><p>3.1.2 AK币共分四种：1<code>AC币</code>=10<code>TLE币</code>=100<code>RE币</code>=1000<code>WA币</code>。</p><h3 id="第二款-如何获得AK币"><a href="#第二款-如何获得AK币" class="headerlink" title="第二款 如何获得AK币"></a>第二款 如何获得AK币</h3><p>3.2.1 在<a href="https://www.luogu.com.cn/team/24959" target="_blank" rel="noopener">提交题目专用团队</a>里提交题目（必须有数据），提出贡题请求后，请主动联系<code>HuangGuanqi</code>或<code>liziheng</code>或<code>吴捧鱼_wpy_WPY</code>。管理员会由你题目的实际难度（也就是说，如果你定了虚高的难度，也只会获得实际难度档的AK币。）奖励一定数量的<code>AK币</code>。</p><p>附：奖励<code>AK币</code>数量参考表：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/image_hosting/dot5oj9r.png" alt=""></p><p>3.2.2 主动创建较高质量的比赛，可以获得数量可观的<code>AK币</code>。</p><p>奖励的<code>AK币</code>数量为：所有题目按照上表计算出的<code>AK币</code> × $(100% + $题目数量$ × 3%)$</p><p>3.2.3 打比赛。两位管理员（或多位）会综合协商<code>AK币</code>奖励多少（按照比赛中的奖励规定奖励<code>AK币</code>）。</p><p>3.2.4 写题解。写完某题的题解后，请联系<code>liziheng</code>或<code>吴捧鱼_wpy_WPY</code>。管理员会根据你写的题解质量奖励一定数量的<code>AK币</code>，并在题目背景内贴出。</p><p>3.2.5 通关联合团队内试炼场题目。不同关卡根据难易会奖励你一定数量的<code>AK币</code>。</p><p>3.2.6 可以在<code>PC加油站</code>内参与“RP大战赛”（每两个月举行一次），RP爆表者可以获得一定数量的<code>AK币</code>。</p><p>3.2.7 每日在<a href="https://www.luogu.com.cn/discuss/show/116358" target="_blank" rel="noopener">指定帖子</a>内打卡，打卡一次获得2 WA币。</p><p>3.2.8 永久管理心情好会奖励部分人<code>AK币</code>。</p><p>3.2.9 进行存款，可获得利息。<br>以下为月利率 <strong>（以30天为一个月计算）</strong>：</p><p>活期：4%</p><p>30天定期：5%</p><p>90天定期：6.5%</p><p>180天定期：8%</p><p>270天定期：9%</p><p>360天定期：10%</p><h3 id="第三款-如何使用AK币"><a href="#第三款-如何使用AK币" class="headerlink" title="第三款 如何使用AK币"></a>第三款 如何使用AK币</h3><p>3.3.1 可以在团队中挂友链【需要花费一定数量的AK币】</p><p>开销定价办法：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/image_hosting/r1zitamw.png" alt=""></p><p>3.3.2 可以购买联合团队内题目数据【正在进行的比赛除外】，规则如下：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/image_hosting/nt1o9gza.png" alt=""></p><pre><code>    买10%的数据：5 WA币*k    买20%的数据：12 WA币*k    买30%的数据：2 RE币*k    买50%的数据：35 WA币*k    买80%的数据：6 RE币*k    买100%的数据：1 TLE币*k</code></pre><p>对于部分题目仅有一个测试点，统一定价为：8 RE币*k</p><p>一次性购买超过1 AC币时，可以打八折优惠。</p><p>3.3.3 团队成员两两之间可以相互传输<code>AK币</code>，<strong>但传输过程中有10%的损耗</strong>。（例如：甲想要从乙处获得9 RE币，则乙必须支出1 TLE币）</p><p>但是，如果永久管理发现你的传输记录有异常，直接<code>AK币</code>清零处理！</p><p>3.3.4 成为临时管理（$4$团）</p><p>可以在指定帖子内花费1 RE币购买$1$积分，每月第一天取积分榜前$3$名成为当月的临时管理。</p><p>3.3.5 成为永久管理（$4$团）</p><p>支付$8$ AC币即可成为永久管理！（分组为：领导小组）</p><h2 id="第五条-等级称号划分（管理员自分一组）"><a href="#第五条-等级称号划分（管理员自分一组）" class="headerlink" title="第五条 等级称号划分（管理员自分一组）"></a>第五条 等级称号划分（管理员自分一组）</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/image_hosting/i90yjjb5.png" alt=""></p><h2 id="第六条-实施时间"><a href="#第六条-实施时间" class="headerlink" title="第六条 实施时间"></a>第六条 实施时间</h2><p>自2020年2月19日零时起施行</p><h1 id="重要提示：团员严禁擅自修改AK币"><a href="#重要提示：团员严禁擅自修改AK币" class="headerlink" title="重要提示：团员严禁擅自修改AK币"></a>重要提示：团员严禁擅自修改AK币</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 团队文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 团队文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱心驰援  同心抗疫  武进侨界在行动</title>
      <link href="/love-helps-unite-to-fight-against-epidemic-disease.html"/>
      <url>/love-helps-unite-to-fight-against-epidemic-disease.html</url>
      
        <content type="html"><![CDATA[<h2 id="爱心驰援-同心抗疫-武进侨界在行动"><a href="#爱心驰援-同心抗疫-武进侨界在行动" class="headerlink" title="爱心驰援  同心抗疫  武进侨界在行动"></a>爱心驰援  同心抗疫  武进侨界在行动</h2><p>病毒无情人有情，爱心驰援同抗疫。连日来，让海内外侨胞最揪心的事莫过于新型冠状病毒感染肺炎疫情。在武进区委统战部的倡议下，从武进到武汉，从国内到海外，武进侨界人士万众一心、爱心联动，用侨界大爱构筑抗击疫情的万里长城，唱响武进侨界爱心驰援同心抗疫之歌。</p><h3 id="捐款捐物，爱心汇聚"><a href="#捐款捐物，爱心汇聚" class="headerlink" title="捐款捐物，爱心汇聚"></a>捐款捐物，爱心汇聚</h3><p>武进侨联副主席方沛琪率先响应，带领其企业天启控股集团的职工们调动各方人脉资源，五天投入首批资金超70万元，采购20万只口罩和集装箱等物资驰援抗疫一线。星火爱心协会党支部书记执行会长、金东方社区侨联委员周明达响应号召，筹集捐款225538元驰援疫情。侨企美硕电子捐款50000元驰援疫情。武进区侨青会员积极响应，纷纷通过各种渠道捐献爱心，名誉会长屠江在个人捐款之外，其公司正在采购医疗防护用品，时刻准备驰援疫区。副会长陆鹏、会员倪伟辰、冯克列、陈宽、潘翼飞等纷纷解囊，尽自己所能捐款疫区，侨青会爱心满满聚集。远在海外的武进侨界人也奔走在爱心驰援抗疫战的第一线。加拿大江苏国际商会执行会长徐晓光、阿联酋华侨华人联合会秘书长张涛在海外发出倡议，设立专项救助基金，聚集海外资源，捐款捐物，驰援疫情。1月28日，他们捐赠的10万个外科口罩、1万个N95、2万个医用帽子及手套从海外出发，直达疫区人民手中。加州大学伯克利分校武进留学生薛之然，积极参加学校社团筹集捐赠资金购买防护服等物资活动。美国亚特兰大华侨蒋晔冰个人捐赠几十套防护服和口罩。澳大利亚常武同乡会秘书长须彬为因疫情影响滞留国内的澳洲老乡及学生提供帮助，协助他们协调与澳洲政府、移民局、学校及公司事宜。</p><h3 id="坚守岗位，物资保障"><a href="#坚守岗位，物资保障" class="headerlink" title="坚守岗位，物资保障"></a>坚守岗位，物资保障</h3><p>受疫情影响，各种防疫物资需求量爆增加，许多武进侨企放弃假期，提前开工，争分夺秒为无声的防疫战加油。亚邦药业放弃春节休息，加班加点，第一时间筹集物资，小年夜及时发武汉60万支多巴胺，1月31日，发重庆9万支，山东6万支，河南河北15万支。南方卫材放弃春节假期，初三便开始部分行政人员上班，并开始小批量投产。1月31日，常州裕丰科创医疗器械有限公司鼎力相助本土疫情防护，向常州市战疫第一线——常州市第三人民医院捐赠第二批医用床垫70套，紧急用于常州区域疫病人员的治疗护理，为常州抗疫贡献自己一份力量。<br>这里只是武进侨界的一个缩影，这里只是侨界爱心的一小部分，这里只是侨界打响抗疫战役的一个方面，还有更多的武进侨企和武进侨界人士在行动，他们尽己所能，自我隔离、捐款捐物、努力工作、加班加点……以自己的方式做好疫情防控，默默地为打好抗击疫请攻坚战作出努力。凝心聚力，抗击疫情，武进侨界在行动！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 抗击疫请 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抗击疫情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 UVA1591 【数据挖掘 Data Mining】</title>
      <link href="/solution-uva1591.html"/>
      <url>/solution-uva1591.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这个题确实反应了<strong>自己的水平</strong>，刚开始读不懂原文，读翻译，但感觉好抽象，还是不理解，便又硬读原文，还是有很大的困难，但多少已经有一些思路了（大体方向</p><p>已经知道枚举），但最大的阻碍还是那个表达式，不隐瞒，<strong>我是借鉴了“代号4101”的博客后</strong>，知道了如何利用那个表达式。</p><h2 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h2><p>根据题目的描述，我们是一定要用$Qofs$’$(i)$ $=$ $(Pofs(i) + Pofs(i)$ $&lt;&lt; A) &gt;&gt;$ B这个公式的，在看题目的输出要求，如果有多解，先输出$A$最小的，如果还是有多解，则</p><p>在输出$B$最小的，这样我们大体就可以猜到一定是两层循环$A$,$B$进行枚举的方式了，这样发现符合要求的，就可以满足$A$,$B$先以最小的输出，在看看暴力枚举会不会超时，题目中</p><p>$1 ≤ N ≤ 2^{20},1 ≤ SP ≤ 2^{10},1 ≤ SQ ≤ 2^{10}$,而这个题目的要求为求一个$K$ 稍微大于 $N * Sq$（就是比它大，而且最接近），所以$MAX = 2 * 10 ^ {30}$,所以A和B都是属于[ 0 , 32 )所以肯定不会超时的啦！</p><p>题目中说到P数组肯定是连续的，$Q$不一定是连续的，所以代入的时候，肯定$N$个数最大值要代入，根据这个式子Pofs(i−1)= Pofs(i)−Sp<br>得：$Pofs(N) $= $Pofs$(n-1) $+Sp$;</p><p>$Qofs$’$(N)$ = （($Pofs$($N - 1$) $+ Pofs$($N - 1$)&lt;&lt; $A)$ &gt;&gt; $B + Sp$  ）大于等于$N * Sq$即可！($Pofs$($N - 1$) $=$ ($N - 1$)$Sp$)</p><h3 id="教训："><a href="#教训：" class="headerlink" title="教训："></a>教训：</h3><p>这个题自己WA了好多遍，错误原因就在于：我直接让标记变量等于第一个值（$i = 0, j = 0$）然后再让后面的和他进行比较，发现比它小，在让标记变量等于另一个更小的，但这是错误的，因为第一个变量可能不大于</p><p>$N * Sq$；</p><h3 id="改进方法："><a href="#改进方法：" class="headerlink" title="改进方法："></a>改进方法：</h3><p>①：应该找第一个符合大于$N * Sq$的，在让标记变量等于它 在进行比较！</p><p>②：（代号$4101$）的方法，直接在循环时和一个不可能取到的非常大的数比较（标记变量为$N * Sq &lt;&lt;10$），这样也确实很简单，代码也相当少！值得学习！</p><p><strong>注：$Pofs ( i ) = Sp * i$ 可以理解为空间大小的偏移量！</strong></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> Sp<span class="token punctuation">,</span>Sq<span class="token punctuation">,</span>N<span class="token punctuation">,</span>c_ans<span class="token punctuation">,</span>c_i<span class="token punctuation">,</span>c_j<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>N<span class="token operator">>></span>Sp<span class="token operator">>></span>Sq<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>cont<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Sp<span class="token operator">*</span><span class="token punctuation">(</span>N<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>Sp<span class="token operator">*</span><span class="token punctuation">(</span>N<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span>j<span class="token punctuation">)</span><span class="token operator">+</span>Sq<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token operator">>=</span>N<span class="token operator">*</span>Sq<span class="token punctuation">)</span><span class="token punctuation">{</span>                    cont<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cont<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        c_ans<span class="token operator">=</span>ans<span class="token punctuation">;</span>                        c_i<span class="token operator">=</span>i<span class="token punctuation">;</span>                        c_j<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token operator">&lt;</span>c_ans<span class="token punctuation">)</span><span class="token punctuation">{</span>                    c_ans<span class="token operator">=</span>ans<span class="token punctuation">;</span>                    c_i<span class="token operator">=</span>i<span class="token punctuation">;</span>                    c_j<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>c_ans<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span> c_i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span> c_j<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>遇到难懂的题目，千万不要放弃，要仔细多读题目，想方法把它理解，测试代码时，要吸取$WA$的教训，仔细想方法，这样题目方能迎刃而解!</p><p><strong>最后求评论和点赞QAQ</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 SP2881 【CLONE - Find the Clones】</title>
      <link href="/solution-sp2881.html"/>
      <url>/solution-sp2881.html</url>
      
        <content type="html"><![CDATA[<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>最近在学习字典树，刚开始看到这题也想用字典树来做。思考后发现其实可以用更简单的$map$来实现。定义类型为$map&lt;char*, int&gt;$的变量，记录字符串出现的次数。然后开辟数组$num[20000]$，记录出现$i(1&lt;=i&lt;=n)$次的字符串的个数。再遍历map，以当前字符串出现的字数减$1$记为$k$作为索引，更新$num[k]$，使得$num[k]++$。</p><p>实现时需要注意的地方：</p><p>1、因为在定义$map$时的$key$类型是$char *$，因此需要自定义比较函数。</p><p>2、为避免每次都$new$新的字符串，定义字符数组，需要$new$的地方，直接从数组中取。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> cmp<span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>dna<span class="token punctuation">;</span>    <span class="token keyword">char</span> dnas<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> cmp<span class="token operator">></span> mp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dna <span class="token operator">=</span> dnas<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> dna<span class="token punctuation">)</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>dna<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> cmp<span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iter <span class="token operator">!=</span> mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num<span class="token punctuation">[</span>iter<span class="token operator">-</span><span class="token operator">></span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            iter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>利用$map$实现，程序的执行效率比较低。有时间再用$Trie$方法实现，比较两者的效率（猜测$Trie$肯定比$map$实现高效）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 CF28A 【Bender Problem】</title>
      <link href="/solution-cf28a.html"/>
      <url>/solution-cf28a.html</url>
      
        <content type="html"><![CDATA[<h2 id="分析题意："><a href="#分析题意：" class="headerlink" title="分析题意："></a>分析题意：</h2><p>给定一个$n$个点的多边形，相邻两个点之间要么$x$坐标相同，要么$y$坐标相同。你有$m$个可弯曲一次的棍子，你可以在棍子的任意一个点将其弯曲，然后将弯曲点固定在一个点上，两端固定在相邻的点上。不允许出现棍子的重叠，请问能否有一种固定若干个棍子的方案，使得构成这样一个$n$个点的封闭多边形。<br>存在则输出方案。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>我们先预处理出所有弯曲点固定点所需要的棍子的长度，然后我们发现如果要使得这个多边形封闭，那么必然有一个固定点是第1个点或第2个点，那么直接暴力枚举可以放置的棍子放置即可。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> point<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>p<span class="token punctuation">[</span><span class="token number">504</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dis_t</span><span class="token punctuation">(</span>point A<span class="token punctuation">,</span>point B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x<span class="token operator">-</span>B<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>y<span class="token operator">-</span>B<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> lc<span class="token punctuation">[</span><span class="token number">504</span><span class="token punctuation">]</span><span class="token punctuation">,</span>olc<span class="token punctuation">[</span><span class="token number">504</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">[</span><span class="token number">504</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token number">504</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">in_</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> bg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>olc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>bg<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>olc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                olc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">dis_t</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token function">in_</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">dis_t</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token function">in_</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>这道题目并不是很难，关键要<strong>读懂题目的意思</strong>，便能<strong>迎刃而解</strong>$qwq$</p><p>最后，祝大家<strong>新年快乐</strong>！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试：加密博文 密码：123456</title>
      <link href="/test-encryption.html"/>
      <url>/test-encryption.html</url>
      
        <content type="html"><![CDATA[<p>喔~居然被你发现了qwq：（</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人主页</title>
      <link href="/personal-homepage.html"/>
      <url>/personal-homepage.html</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎各位OIer光临"><a href="#欢迎各位OIer光临" class="headerlink" title="$欢迎各位OIer光临$"></a>$欢迎各位OIer光临$</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.loli.net/2019/12/10/boDlEBgsczPJI9v.png" alt=""></p><h1 id="AKC加油站"><a href="#AKC加油站" class="headerlink" title="AKC加油站"></a><a href="https://www.luogu.com.cn/team/16683" target="_blank" rel="noopener">A<del>K</del>C加油站</a></h1><h1 id="OKI加油站"><a href="#OKI加油站" class="headerlink" title="OKI加油站"></a><a href="https://www.luogu.com.cn/team/16725" target="_blank" rel="noopener">O<del>K</del>I加油站</a></h1><h1 id="PAC加油站"><a href="#PAC加油站" class="headerlink" title="PAC加油站"></a><a href="https://www.luogu.com.cn/team/23922" target="_blank" rel="noopener">P<del>A</del>C加油站</a></h1><blockquote><h1 id="正在-即将进行的比赛："><a href="#正在-即将进行的比赛：" class="headerlink" title="正在/即将进行的比赛："></a>正在/即将进行的比赛：</h1><h2 id="【-AC-加油站】-AK-不容易-lt-—纯粹送-AK-币"><a href="#【-AC-加油站】-AK-不容易-lt-—纯粹送-AK-币" class="headerlink" title="【$AC$加油站】 $AK$不容易 <—纯粹送$AK$币"></a>【$AC$加油站】 <a href="https://www.luogu.com.cn/contest/26072" target="_blank" rel="noopener">$AK$不容易</a> &lt;—纯粹送$AK$币</h2><h2 id="【-OI-加油站】-可怜-CWH-赛-lt-—比较正常"><a href="#【-OI-加油站】-可怜-CWH-赛-lt-—比较正常" class="headerlink" title="【$OI$加油站】 可怜$CWH$赛 <—比较正常"></a>【$OI$加油站】 <a href="https://www.luogu.com.cn/contestnew/show/24941" target="_blank" rel="noopener">可怜$CWH$赛</a> &lt;—比较正常</h2></blockquote><h2 id="空间访问次数"><a href="#空间访问次数" class="headerlink" title="空间访问次数"></a>空间访问次数<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.hit-counts.com/counter.php?t=MTQ0MzkyMw" alt=""></h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://v2.jinrishici.com/one.svg?font-size=45&amp;spacing=5&amp;color=SlateBlue" alt=""><br><a href="https://www.luogu.com.cn/team/show?teamid=16725" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D450%2C600/sign=90881c4dc63d70cf4cafa209cdecfd36/adaf2edda3cc7cd962a67aad3601213fb80e913f.jpg" alt=""></a><br><a href="https://www.luogu.com.cn/team/show?teamid=16725" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/pic/46439.png" alt=""></a></p><h1 id="My-Blog"><a href="#My-Blog" class="headerlink" title="$My Blog$"></a><a href="https://vzv8js.coding-pages.com" target="_blank" rel="noopener">$My Blog$</a></h1><h1 id="程序员开发必备"><a href="#程序员开发必备" class="headerlink" title="程序员开发必备"></a><a href="https://tool.lu/" target="_blank" rel="noopener">程序员开发必备</a></h1><h3 id="【神仙】zmxqs-VS【毒瘤】lxl-，zmxqs英勇就义，欢迎大家考古"><a href="#【神仙】zmxqs-VS【毒瘤】lxl-，zmxqs英勇就义，欢迎大家考古" class="headerlink" title="【神仙】zmxqs VS【毒瘤】lxl ，zmxqs英勇就义，欢迎大家考古"></a><a href="https://www.luogu.org/discuss/show/137272" target="_blank" rel="noopener">【神仙】zmxqs VS【毒瘤】lxl ，zmxqs英勇就义，欢迎大家考古<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/pic/74688.png" alt=""></a></h3><p><a href="https://codeforces.com/profile/liziheng" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img.shields.io/badge/liziheng-International%20master%20%202358-ff8c00.svg?longCache=true&amp;style=for-the-badge&amp;logo=Codeforces&amp;link=https://codeforces.com/profile/liziheng" alt=""></a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.loli.net/2019/12/10/UCLtrcxG6FwW7R4.png" alt=""></p><pre class="line-numbers language-cpp"><code class="language-cpp">小渊和小轩正在传纸条，运输小队长正过独木桥；旅行家预算最小的费用，明明迷上侦探沉迷推理；丁丁玩数字游戏着了迷，陶陶兴高采烈地摘苹果；校门外一棵棵树长起来，辰辰和师傅一起去采药；小青蛙踩着石头过了河，老师带领同学传球游戏；小渊的立体图严格摆放，明明正乱猜一堆随机数；金明激动地装修着新房，Jam正用小写字母计数；Mars星球上有能量项链，金明预算购买主件附件；Hanks博士培养细胞样本，潜伏者专心地破译密码；Hankson出了一道趣味题，小城和小华玩靶形数独<span class="token punctuation">;</span>小明在藏宝楼上开宝箱，也在花店门口摆一排花；使者游历各国学习文化，BlaisedeVigenere设计密码；国王邀请大臣领取奖赏，小A和小B一起外出旅行；守望者在荒岛上忙逃离，FJ在数字三角形上走路；笨小猴正在选幸运单词，机器人尝试着搬运重物；小明自己玩耍数字游戏，教主把花园种满一圈树；奇怪的电梯正上上下下，小明规划旅行国家计划；一堆人数来数去杀坏人，硬币正做着无谓的翻转；拱猪是扑克牌非常有趣，尤其是Peter的烟闪光；FJ专心地给奶牛分着厩，Tom研究双栈排序着迷；FJ的奶牛掉进垃圾陷阱，一颗颗导弹被系统拦截；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2019-09-02-我在洛谷红名了！"><a href="#2019-09-02-我在洛谷红名了！" class="headerlink" title="2019.09.02,我在洛谷红名了！"></a><font color="red">2019.09.02,我在洛谷红名了！</font></h2><p><a href="https://www.luogu.org/team/show?teamid=16725" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://ipcounter.ihcr.top/?mode=2&amp;mail=lizihengcz@vip.qq.com&amp;qq=2213220653&amp;gh=liziheng.blog.luogu.org&amp;lg=%E6%9D%8E%E6%A2%93%E6%81%92&amp;str=%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%9C%89%E6%83%8A%E5%96%9C" alt=""></a></p><h1 id="蒟蒻的优秀团队————OI加油站"><a href="#蒟蒻的优秀团队————OI加油站" class="headerlink" title="蒟蒻的优秀团队————OI加油站"></a><a href="https://www.luogu.org/team/show?teamid=16725" target="_blank" rel="noopener">蒟蒻的优秀团队————OI加油站</a></h1><p><code>点上方图片有惊喜</code></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/image_hosting/3o0ncubl.png" alt=""></p><h1 id="༺༺AK༒IOI༻༻"><a href="#༺༺AK༒IOI༻༻" class="headerlink" title="$༺༺AK༒IOI༻༻$"></a>$༺༺AK༒IOI༻༻$</h1><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.loli.net/2019/12/03/dNkPxSegl3ERcJ7.gif" alt=""></h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.luogu.com.cn/upload/pic/74989.png" alt=""></p><h3 id="NOIP是一种追求，但追求激励我们前行，"><a href="#NOIP是一种追求，但追求激励我们前行，" class="headerlink" title="NOIP是一种追求，但追求激励我们前行，"></a>NOIP是一种追求，但追求激励我们前行，</h3><h3 id="NOI是一种梦想，但梦想更是一种现实，"><a href="#NOI是一种梦想，但梦想更是一种现实，" class="headerlink" title="NOI是一种梦想，但梦想更是一种现实，"></a>NOI是一种梦想，但梦想更是一种现实，</h3><h3 id="IOI是一种奢望，但奢望是奋斗之希望。"><a href="#IOI是一种奢望，但奢望是奋斗之希望。" class="headerlink" title="IOI是一种奢望，但奢望是奋斗之希望。"></a>IOI是一种奢望，但奢望是奋斗之希望。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人主页 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人主页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P5462 【X龙珠】</title>
      <link href="/solution-p5462.html"/>
      <url>/solution-p5462.html</url>
      
        <content type="html"><![CDATA[<h1 id="分析题意："><a href="#分析题意：" class="headerlink" title="分析题意："></a>分析题意：</h1><p>龙珠这个东西是个好东西，听同学说挺好看的。。。</p><p>这题机房的大佬一拍大腿，顺口说出了树形结构这个高大上的东西，蒟蒻表示不会啊<del>（其实是懒得打。。。）</del>，在仔细看看题目，这题不就是链表吗，但是指针好像不会啊。。。</p><p>那就用数组模拟一下吧。。。</p><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>用链表存下每一个点的前一个和后一个，然后从大往小找，仅当他后面有数时，将没用过的点连同他后面的一个一起输出，输出后把他前面的数和他后面的后面的数连上然后就没了</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std；<span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span>；<span class="token keyword">int</span> sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>next<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span>；<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m；    cin<span class="token operator">>></span>n；    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>；        next<span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>；        head<span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>；    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span>；            next<span class="token punctuation">[</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>next<span class="token punctuation">[</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>；            head<span class="token punctuation">[</span>next<span class="token punctuation">[</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">[</span>i<span class="token punctuation">]</span>；            next<span class="token punctuation">[</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl；    <span class="token keyword">return</span> <span class="token number">0</span>；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PS-千万别抄，我已经把分号全改成中文了QAQ"><a href="#PS-千万别抄，我已经把分号全改成中文了QAQ" class="headerlink" title="PS:千万别抄，我已经把分号全改成中文了QAQ"></a>PS:千万别抄，我<del>已经把分号全改成中文了QAQ</del></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开源</title>
      <link href="/blog-open-source.html"/>
      <url>/blog-open-source.html</url>
      
        <content type="html"><![CDATA[<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Blog-Open-Source/blog-demo1.gif" alt="演示Demo"></p><h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly" target="_blank" rel="noopener">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>主题, 并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://luoguliziheng.github.io/" target="_blank" rel="noopener">https://luoguliziheng.github.io</a>，博客演示：<a href="https://www.lizihengblog.xyz" target="_blank" rel="noopener">www.lizihengblog.xyz</a>。</p><hr><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>原主题特性</strong>:</p><ul><li><p>简单漂亮，文章内容美观易读</p></li><li><p><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</p></li><li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p></li><li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p></li><li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p></li><li><p>时间轴式的归档页</p></li><li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p></li><li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p></li><li><p>可自定义的数据的友情链接页面</p></li><li><p>支持文章置顶和文章打赏</p></li><li><p>支持 <code>MathJax</code></p></li><li><p><code>TOC</code> 目录</p></li><li><p>可设置复制文章内容时追加版权信息</p></li><li><p>可设置阅读文章时做密码验证</p></li><li><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p></li><li><p>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p></li><li><p>支持在首页的音乐播放和视频播放功能</p><p><strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p></li><li><p>修改了原主题的一些很多<code>bug</code>   2019.08.05</p></li><li><p>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</p></li><li><p>增加<code>留言板</code>功能          2019.08.05</p></li><li><p>在关于板块,加入<code>简历</code>功能页   2019.08.05</p></li><li><p>增加视听[视觉听觉影音]板块       2019.08.10</p></li><li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</p></li><li><p>增加网站运行时间显示  2019.08.10</p></li><li><p>增加<code>动漫模型</code>     2019.08.10</p></li><li><p>整体替换Banner图片和文章特色图片   2019.08.10</p></li><li><p>增加分类<code>相册</code>功能         2019.08.29</p></li><li><p>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</p></li><li><p>修改了一些控件的参数   2019.09.01</p></li><li><p>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</p></li><li><p>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</p></li><li><p>添加页面樱花飘落动效            2019.09.09</p></li><li><p>添加鼠标点击烟花爆炸动效   2019.09.09</p></li><li><p>加入天气接口控件   2019.09.09</p></li><li><p>加入鼠标点击文字特效   2019.09.10</p></li><li><p>添加页面雪花飘落动效            2019.09.10</p></li><li><p>添加在线聊天插件            2019.09.12</p></li><li><p>持续更新…</p></li></ul><hr><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目</li><li>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>, 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.liziheng.ac.cn/medias/reward/alipay.jpg"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.liziheng.ac.cn/medias/reward/wechat.png"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.liziheng.ac.cn/medias/reward/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
